
<div class="back-to-cart">
  <%= link_to "Back to cart", cart_path(@current_cart) %>
</div>


<div class="checkout-flex">

    <section class="order-form">

      <h1 style="font-size: 56px;">Checkout</h1>

      <div class="below">



      <div class="shipping" style="margin-bottom: 40px;">
        <h2>Where are we going?</h2>
        <h4>Enter your details below...</h4>
      </div>


      <form action="/orders" method="post" id="new_order">
        <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
        <input type="hidden" name="order[stripe_payment_id]" id="payment">

        <section class="name-flex">
          <div class="field">
            <label for="FirstName">First name</label>
            <input type="text" name="order[first_name]" id="FirstName">
          </div>

          <div class="field-last-name">
            <label for="LastName">Last name</label>
            <input type="text" name="order[last_name]" id="LastName">
          </div>

        </section>


        <div class="field">
          <label for="Email">Email</label>
          <input type="text" name="order[email]" id="Email">
        </div>


        <div class="field">
          <label for="Address1">Address</label>
          <input type="text" name="order[address_1]" id="Address1">
        </div>

        <div class="field">
          <label for="Address2">Apt, suite, etc (optional)</label>
          <input type="text" name="order[address_2]" id="Address2">
        </div>

        <section class="city-postal-flex">
          <div class="field">
            <label for="City">City</label>
            <input type="text" name="order[city]" id="City">
          </div>

          <div class="field-postal">
            <label for="PostalCode">Postal/Zip code</label>
            <input type="text" name="order[postal_code]" id="PostalCode">
          </div>

        </section>

        <div class="field">
          <label for="Country">Country</label>
          <input type="text" name="order[country]" id="Country">
        </div>


      <div id="card-errors">
        <% @order.errors[:stripe_payment_id].each do |message| %>
      <p class="error"><%= message %></p>
      <% end %>
      </div>


      <div id="card" class="card-order">
        <!-- card element appears here -->
      </div>


         <input type="submit" value="Confirm order and pay">

         </form>

   </section>

 <section class="order-total">
   <h2>Order Total</h2>
     <p>
       Sub total: <%= number_to_currency @order.total_price, id: "amount" %>
     </p>
     <p class="taxes">*Shipping & taxes included</p>
    <hr>

     <span>Total:</span><span><%= number_to_currency @order.total_price.to_i %> </span>
   </section>

</div>
</div>

  <script charset="utf-8">

  (function(){

  var stripe = Stripe('<%= Rails.application.credentials[Rails.env.to_sym][:stripe_public_key] %>');
    // load the fonts in
  var fonts = [{
    cssSrc:('https://fonts.googleapis.com/css2?family=Play&display=swap'),
    cssSrc:('https://fonts.googleapis.com/css?family=Montserrat:300'),
    cssSrc: ('https://fonts.googleapis.com/css2?family=Aldrich&display=swap')
  }];
  // styles for the stripe inputs
  var styles = {
    base: {
      iconColor: "white",
      color: "white",
      fontFamily: "Aldrich",
      fontSize: "14px",
      fontSmoothing: 'antialiased',

      "::placeholder": {
        color: "white"
      },
      ":-webkit-autofill": {
        color: "#ccc"
      }
    },
    invalid: {
      iconColor: "#F29CA6",
      color: "#F29CA6"
    }
  }

  var elements = stripe.elements();
  var cardElement = elements.create('card', {style: styles});
  cardElement.mount('#card');

  const form = document.querySelector('#new_order');
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    // Step 1: POST request to create payment intent

    fetch('/payment_intents', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        authenticity_token: '<%= form_authenticity_token %>',
      }),
    })
    .then((response) => response.json())
    .then((paymentIntent) => {
      // Step 2: Create payment method and confirm payment intent.
      stripe.confirmCardPayment(
        paymentIntent.client_secret, {
          payment_method: {
            card: cardElement
          }
        }
      ).then((resp) => {
        if (resp.error) {
          $("#card-errors").html(resp.error.message)
        } else {
          // Step 3: Embed payment ID in form
          const paymentIdInput = document.querySelector('#payment');
          paymentIdInput.value = paymentIntent.id;
          form.submit();
        }
      })
    })
    .catch((error) => {
      console.error('Error:', error);
    });
  });
   })();
</script>
